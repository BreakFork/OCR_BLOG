diff --git a/System/Database.php b/System/Database.php
new file mode 100644
index 0000000..ddb06b4
--- /dev/null
+++ b/System/Database.php
@@ -0,0 +1,76 @@
+<?php
+/**
+ * Database class file
+ *
+ * PHP Version 7.2
+ *
+ * @category System
+ * @package  System
+ * @author   Hervé Boulangué <h.boulangue@gmail.com>
+ * @license  http://opensource.org/licenses/gpl-license.php GNU Public License
+ * @link     http://blog.local/
+ */
+namespace System;
+
+use Doctrine\ORM\ORMException;
+use Doctrine\ORM\Tools\Setup;
+use Doctrine\ORM\EntityManager;
+
+/**
+ * Class which allow us to get the Entity Manager
+ *
+ * @category System
+ * @package  System
+ * @author   Gaëtan HERFRAY <gaetan.hfy@gmail.com>
+ * @license  http://opensource.org/licenses/gpl-license.php GNU Public License
+ * @link     http://blog.local/
+ */
+class Database{
+    /**
+     * The username to be used for access to database
+     */
+    private const DB_USERNAME = "p5_dasymfony";
+
+    /**
+     * The password to be used for access to database
+     */
+    private const DB_PASSWORD = "p5_dasymfony";
+
+    /**
+     * The name of the database yo be used
+     */
+    private const DB_NAME = "p5_dasymfony";
+
+    /**
+     * @var EntityManager|null the Doctrine EntityManager
+     */
+    private static $entityManager = null;
+
+    /**
+     * Returns the Doctrine Entity Manager of the application
+     * @return EntityManager|null the Entity Manager or null if an error occurs
+     */
+    public static function getEntityManager(): ?EntityManager {
+        if(self::$entityManager == null){
+            $paths = array(__DIR__ . "/" . "../Models");
+            $isDevMode = false;
+
+            // the connection configuration
+            $dbParams = array(
+                'driver'   => 'pdo_mysql',
+                'user'     => self::DB_USERNAME,
+                'password' => self::DB_PASSWORD,
+                'dbname'   => self::DB_NAME,
+            );
+
+            $config = Setup::createAnnotationMetadataConfiguration($paths, $isDevMode);
+
+            try {
+                self::$entityManager = EntityManager::create($dbParams, $config);
+            } catch (ORMException $e) {
+                return null;
+            }
+        }
+        return self::$entityManager;
+    }
+}
\ No newline at end of file
diff --git a/System/Router.php b/System/Router.php
index d8aff39..8f03fe0 100644
--- a/System/Router.php
+++ b/System/Router.php
@@ -10,8 +10,8 @@
  * @license  http://opensource.org/licenses/gpl-license.php GNU Public License
  * @link     http://blog.local/
  */
-require_once('autoload.php');
-require_once('../vendor/autoload.php');
+require_once __DIR__ . '/' . 'autoload.php';
+require_once __DIR__ . '/' . '../vendor/autoload.php';
 
 use Controllers\PageController;
 use Controllers\AdminController;
diff --git a/System/autoload.php b/System/autoload.php
index fbd304d..a17ae67 100644
--- a/System/autoload.php
+++ b/System/autoload.php
@@ -5,6 +5,6 @@ spl_autoload_register(
     */
     function ($class) {
         $class = str_replace("\\", "/", $class);
-        include_once("../" . $class . ".php");
+        include_once __DIR__ . '/' . "../" . $class . ".php";
     }
 );
diff --git a/config/cli-config.php b/config/cli-config.php
new file mode 100644
index 0000000..ea6458f
--- /dev/null
+++ b/config/cli-config.php
@@ -0,0 +1,8 @@
+<?php
+require_once __DIR__ . '/' . "../vendor/autoload.php";
+require_once __DIR__ . '/' . "../System/autoload.php";
+
+use Doctrine\ORM\Tools\Console\ConsoleRunner;
+use System\Database;
+
+return ConsoleRunner::createHelperSet(Database::getEntityManager());
\ No newline at end of file
